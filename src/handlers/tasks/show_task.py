from aiogram import Router, types
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from db import get_task_by_id
from . import TaskControl

router = Router()


class ShowTask(CallbackData, prefix="showtask"):
    id: int


@router.callback_query(ShowTask.filter())
async def show_task(
    call: types.CallbackQuery, callback_data: ShowTask
) -> None:
    """Shows a task with passed id."""
    task = await get_task_by_id(callback_data.id)

    # Formatting strings and making buttons
    daily_btn = types.InlineKeyboardButton(
        text="üóì –°–¥–µ–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π",
        callback_data=TaskControl(
            action="mark_as_daily", task_id=task.id
        ).pack()
    )
    return_to_tasks = "return_to_tasks"
    if task.daily:
        daily_btn = types.InlineKeyboardButton(
            text="üìù –°–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω–æ–π",
            callback_data=TaskControl(
                action="mark_as_regular", task_id=task.id
            ).pack()
        )
        return_to_tasks = "return_to_daily_tasks"

    if task.completed:
        completed = ("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ "
            f"{task.completed_date.strftime('%d-%m-%Y %H:%M')}\n")
        completed_btn = types.InlineKeyboardButton(
            text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=TaskControl(
                action="mark_as_incompleted", task_id=task.id
            ).pack()
        )
    else:
        completed = "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        completed_btn = types.InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=TaskControl(
                action="mark_as_completed", task_id=task.id
            ).pack()
        )

    deadline = ""
    if task.deadline:
        now = datetime.utcnow()
        remaining: int = task.deadline - now

        # Declination of remaining days for comfortable reading in Russian
        state = ""
        if remaining.days < 0:
            state = "–∏—Å—Ç—ë–∫! "
        elif remaining.days == 0:
            state = "–ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫! "
        elif remaining.days == 7:
            state = "–æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è. "
        elif remaining.days < 7:
            if remaining.days == 1:
                state = f"–ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, –æ—Å—Ç–∞–ª—Å—è {remaining.days} –¥–µ–Ω—å! "
            elif 1 < remaining.days < 5:
                state = f"–æ—Å—Ç–∞–ª–æ—Å—å {remaining.days} –¥–Ω—è/—Å—É—Ç–æ–∫. "
            else:
                state = f"–æ—Å—Ç–∞–ª–æ—Å—å {remaining.days} –¥–Ω–µ–π/—Å—É—Ç–æ–∫. "

        deadline = (f"–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: üïì *{state}*"
        f"{task.deadline.strftime('%d-%m-%Y %H:%M')}\n")

    reward = ""
    if task.reward:
        reward = f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: üèÜ {task.reward}"

    # Buttons
    edit_btn = types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=TaskControl(action="edit", task_id=task.id).pack()
    )
    delete_btn = types.InlineKeyboardButton(
        text="üóë –£–¥–∞–ª–∏—Ç—å",
        callback_data=TaskControl(action="delete", task_id=task.id).pack()
    )
    return_btn = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=return_to_tasks
    )

    builder = InlineKeyboardBuilder()
    builder.row(completed_btn, daily_btn, width=1)
    builder.row(edit_btn, delete_btn)
    builder.row(return_btn)

    await call.message.edit_text(
        f"–ó–∞–¥–∞—á–∞: *{task.name}*\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {completed}"
        f"{deadline}{reward}"
    )
    await call.message.edit_reply_markup(
        call.inline_message_id, reply_markup=builder.as_markup()
    )
